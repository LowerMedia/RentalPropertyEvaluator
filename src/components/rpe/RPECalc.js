const RPECalc = {
	cashflow: (income, expenses) => {
		return income - expenses;
	},

	CashFlow: (state) => {
		return state.calculated.TotalMonthlyIncome - state.calculated.TotalMonthlyExpenses;
	},
	
	CashFlowYearly: (state) => {
		return state.calculated.CashFlow * 12;
	},

	TotalMonthlyIncome: (state) => {
		return state.changeable.MonthlyRent;
	},

	TotalMonthlyExpenses: (state) => {
		let totalPercentageExpenses = 20;
		let percentageExpenseEstimate = state.calculated.TotalMonthlyIncome * ( totalPercentageExpenses * 0.01 ); // whole number int generated by percentage of income
		// TODO: add HOA and taxes here
		return percentageExpenseEstimate;
	},

	cocroi: (totalInvestment, yearlyIncome) => {
		return ( yearlyIncome / totalInvestment ) * 100; // TODO: ( ( ( Gross Rent ) + ( Other Income) ) - ( Vacancy + Operating Expenses + Annual Mortgage Payments ) ) / Total Cash Invested
	},

	cap: (netOperatingIncome, PurchasePrice) => {
		return netOperatingIncome / PurchasePrice;
	},

	// DEPRECATED DO NOT USE OR REPLACE IF USED
	monthlymortgage: (interest,term,loanAmount) => {
		return ( loanAmount * interest * Math.pow( ( 1 + interest ), term ) ) / ( Math.pow( ( 1 + interest), term) - 1 );
	},

	MonthlyMortgagePayment: (state) => {
		const loanAmount = state.calculated.TotalCashInvested;
		const interest = ( state.changeable.InterestRate * 0.01 ) / 12;
		const term = state.changeable.LoanTerm * 12;
		return ( loanAmount * interest * Math.pow( ( 1 + interest ), term ) ) / ( Math.pow( ( 1 + interest), term) - 1 );
	},

	DebtServiceCoverageRatio: (cashflowForDebtService, TotalDebtService) => {
		// debt to income ratio

		return cashflowForDebtService / TotalDebtService;

		//cash flow available for debt service / total debt service
	},

	noi: () => {
		// net operating income
	},

	TotalCashInvested: (state) => {
		return state.changeable.PurchasePrice + state.changeable.ClosingCosts;
	}
};
export default RPECalc;