const RPECalc = {

	CashFlow: (state) => {
		return state.calculated.TotalMonthlyIncome - state.calculated.TotalMonthlyExpenses;
	},
	
	CashFlowYearly: (state) => {
		return state.calculated.CashFlow * 12;
	},

	TotalMonthlyIncome: (state) => {
		return state.changeable.MonthlyRent;
	},

	TotalYearlyIncome: (state) => {
		return state.changeable.MonthlyRent * 12;
	},

	TotalPercentageExpensesEstimate: (state) => {
		return ( state.changeable.CapEx + state.changeable.MaintRepExpense + state.changeable.MiscExpense + state.changeable.PropMngtExpense + state.changeable.VacancyExpense );
	},

	TotalMonthlyExpenses: (state) => {
		// TODO: add HOA and taxes here
		return state.calculated.TotalMonthlyIncome * ( state.calculated.TotalPercentageExpensesEstimate * 0.01 ); // whole number int generated by percentage of income;
	},

	MonthlyIncome: (state) => {
		return state.calculated.TotalMonthlyIncome; // TODO: add var for other sources of income (parking, etc)
	},

	MonthlyMortgagePayment: (state) => {
		const loanAmount = state.calculated.TotalCashInvested;
		const interest = ( state.changeable.InterestRate * 0.01 ) / 12;
		const term = state.changeable.LoanTerm * 12;
		return ( loanAmount * interest * Math.pow( ( 1 + interest ), term ) ) / ( Math.pow( ( 1 + interest), term) - 1 );
	},

	DebtServiceCoverageRatio: (cashflowForDebtService, TotalDebtService) => {
		// debt to income ratio
		return 99// cashflowForDebtService / TotalDebtService; //cash flow available for debt service / total debt service
	},

	Cap: (state) => {
		// capitalization rate
		return 99;
	},

	CoCROI: (state) => {
		// cash on cash return on investment
		return 99;
	},

	NetOperatingIncome: (state) => {
		// net operating income
		return 99;
	},

	TotalCashInvested: (state) => {
		return state.changeable.PurchasePrice + state.changeable.ClosingCosts;
	}
};
export default RPECalc;